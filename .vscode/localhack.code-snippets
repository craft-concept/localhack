{
  // Place your localhack workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "JS Code Block": {
    "scope": "markdown",
    "prefix": "js",
    "description": "Create a .mjs code block.",
    "body": ["```mjs", "$0", "```"]
  },
  "Split Code Block": {
    "scope": "javascript",
    "prefix": "js",
    "description": "Split a code block.",
    "body": ["```", "$0", "```mjs"]
  },
  "Import React": {
    "scope": "typescriptreact",
    "prefix": "react",
    "description": "import React",
    "body": ["import * as React from \"react\""]
  },
  "New Engine": {
    "scope": "typescript",
    "prefix": "eng",
    "description": "Create a new LocalHack Engine.",
    "body": [
      "import * as React from \"react\"",
      "import { Engine, Update, Dispatch, identity } from \"../lib\"",
      "",
      "export type Action =",
      "  | { type: \"SomethingHappened\" }",
      "  | { type: \"OtherThingHappened\" }",
      "",
      "export interface State {}",
      "",
      "export const init = (): State => ({})",
      "",
      "export const update: Update<Action, State> = action => {",
      "  switch (action.type) {",
      "    case \"SomethingHappened\":",
      "      return identity",
      "",
      "    default:",
      "      return identity",
      "  }",
      "}",
      "",
      "export const engine: Engine<Action, State> = dispatch => {",
      "  return state => {}",
      "}"
    ]
  },
  "New Rendering Engine": {
    "scope": "typescriptreact",
    "prefix": "eng",
    "description": "Create a new LocalHack Engine with a Component.",
    "body": [
      "import * as React from \"react\"",
      "import { Engine, Update, Dispatch, identity } from \"../lib\"",
      "",
      "export type Action =",
      "  | { type: \"SomethingHappened\" }",
      "  | { type: \"OtherThingHappened\" }",
      "",
      "export interface State {}",
      "",
      "export const init = (): State => ({})",
      "",
      "export const update: Update<Action, State> = action => {",
      "  switch (action.type) {",
      "    case \"SomethingHappened\":",
      "      return identity",
      "",
      "    default:",
      "      return identity",
      "  }",
      "}",
      "",
      "export const engine: Engine<Action, State> = dispatch => {",
      "  return state => {}",
      "}",
      "",
      "export interface Props {",
      "  state: State",
      "  dispatch: Dispatch<Action>",
      "}",
      "",
      "export default function SomeComponent(props: Props): React.ReactNode {",
      "  return null",
      "}"
    ]
  },
  "New Behavior Component": {
    "scope": "typescriptreact",
    "prefix": "comp",
    "description": "Create a new behavior component.",
    "body": [
      "import * as React from \"react\"",
      "import { Engine, Update, Dispatch, identity } from \"../lib\"",
      "",
      "export type Action =",
      "  | { type: \"SomethingHappened\" }",
      "  | { type: \"OtherThingHappened\" }",
      "",
      "export interface State {}",
      "",
      "export const init = (): State => ({})",
      "",
      "export const update: Update<Action, State> = action => {",
      "  switch (action.type) {",
      "    case \"SomethingHappened\":",
      "      return identity",
      "",
      "    default:",
      "      return identity",
      "  }",
      "}",
      "",
      "export const engine: Engine<Action, State> = dispatch => {",
      "  return state => {}",
      "}",
      "",
      "export interface Props {",
      "  state: State",
      "  dispatch: Dispatch<A>",
      "}",
      "",
      "export default function SomeComponent(props: Props): React.ReactNode {",
      "  return state => {",
      "  }",
      "}"
    ]
  }
}
